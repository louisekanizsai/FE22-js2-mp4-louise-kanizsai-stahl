{"mappings":"imBAsBA,IAAAA,EACAC,E,iFArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,8FCAzD,MAAMC,EACJC,SAASC,iBAAiB,WACtBC,EACJF,SAASC,iBAAiB,aAEtBE,EAAqCH,SAASI,cAAc,UAC5DC,EAAsCL,SAASI,cAAc,WAC7DE,EAA8BN,SAASI,cAAc,YAE3D,IAAIG,EAAoB,GACpBC,EAAsB,GACtBC,EAAyB,GA+E7B,SAASC,EAAUC,EAAoBC,EAAqBC,GAC1D,MAAMC,EAAeC,WAAWJ,GAC1BK,EAAeD,WAAWH,GAGhC,MAAiB,MAAbC,GACMC,EAAOE,GAAMC,WACC,MAAbJ,GACDC,EAAOE,GAAMC,WACC,MAAbJ,GACDC,EAAOE,GAAMC,WACC,MAAbJ,GACDC,EAAOE,GAAMC,WAEd,GAEX,CA7FAlB,EAAWmB,SAASC,IAClBA,EAAOC,iBAAiB,SAAS,KAC/B,MAAMC,EAAwBF,EAAOG,UAErB,OAAZhB,IAGsB,MAAtBA,EAAQgB,WACc,MAAtBhB,EAAQgB,WACc,MAAtBhB,EAAQgB,WACc,MAAtBhB,EAAQgB,WACc,MAAtBhB,EAAQgB,UAERhB,EAAQgB,UAAYD,EAGpBf,EAAQgB,WAAaD,EAIvBd,EAAYD,EAAQgB,UACtB,GACF,IAGFpB,EAAagB,SAASC,IACpBA,EAAOC,iBAAiB,SAAS,KAC/B,MAAMG,EAA0BJ,EAAOG,UAEvB,OAAZhB,IAEFC,EAAYD,EAAQgB,UAIlBd,EADqB,KAAnBC,EACYC,EAAUF,EAAaD,EAAWE,GAGlCF,EAIhBA,EAAY,GACZE,EAAiBc,EACjBjB,EAAQgB,UAAYC,EACtB,GACF,IAGe,OAAbpB,GACFA,EAASiB,iBAAiB,SAAS,KAEjB,OAAZd,IACFA,EAAQgB,UAAY,KAEtBd,EAAc,GACdD,EAAY,GACZE,EAAiB,MAIH,OAAdJ,GACFA,EAAUe,iBAAiB,SAAS,KAElB,OAAZd,GAAkC,KAAdC,GAAuC,KAAnBE,IAE1CD,EAAcE,EAAUF,EAAaD,EAAWE,GAGhDH,EAAQgB,UAAYd,EACpBD,EAAY,GACZE,EAAiB,GACnB,IAwBJ,MAAMe,EAAiCxB,SAASI,cAAc,e,MC7G9DqB,EAAiB,IAAAC,IAAoB/B,EAAA,SAAAgC,QAA6C,qBAAAC,KAAUX,WD8G5F,MAAMY,EAAA,IAAAH,IAAAD,GAEa,OAAfD,IACAA,EAAWM,MAAMC,gBAAkB,OAAOF","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-a2bb54724b707dbc.js","src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-200ea384ba2a6785.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"l1gf1\\\":\\\"index.d9b352e7.js\\\",\\\"9A19H\\\":\\\"bg.1cdd394a.jpg\\\"}\"));","const numberBtns: NodeListOf<HTMLButtonElement> =\n  document.querySelectorAll(\".number\"); // 0-9\nconst operatorBtns: NodeListOf<HTMLButtonElement> =\n  document.querySelectorAll(\".operator\"); // + - * /\n\nconst clearBtn: HTMLButtonElement | null = document.querySelector(\".clear\"); \nconst equalsBtn: HTMLButtonElement | null = document.querySelector(\".equals\"); \nconst display: HTMLElement | null = document.querySelector(\".display\");\n\nlet lastValue: string = \"\"; // senast inskrivna värdet på displayen\nlet storedValue: string = \"\"; // sparar senast inmatat tal (lastValue) när man klickar på en operatorknapp (eller sparar resultatet av en beräkning, om man klickar på en operatorknapp för andra gången)\nlet storedOperator: string = \"\"; //sparar senast klickade operatorknappen\n\nnumberBtns.forEach((button) => {\n  button.addEventListener(\"click\", () => {\n    const clickedNumber: string = button.innerText;\n\n    if (display !== null) {\n      // om den är resettad, eller om man nyss klickat på en operator: ersätt vad som står med den klickade siffran\n      if (\n        display.innerText === \"0\" ||\n        display.innerText === \"+\" ||\n        display.innerText === \"-\" ||\n        display.innerText === \"*\" ||\n        display.innerText === \"/\"\n      ) {\n        display.innerText = clickedNumber;\n      } else {\n        // om det står siffror i displayen: fyll på med siffror\n        display.innerText += clickedNumber;\n      }\n\n      // uppdaterar senaste värdet\n      lastValue = display.innerText;\n    }\n  });\n});\n\noperatorBtns.forEach((button) => {\n  button.addEventListener(\"click\", () => {\n    const clickedOperator: string = button.innerText;\n\n    if (display !== null) {\n      // ser till att senaste värdet alltid är det som står på displayen\n      lastValue = display.innerText;\n\n      // om det finns en sparad operator, dvs man gör flera beräkningar på rad: gör beräkningen med sparat värde och senast värde, spara det i storedValue\n      if (storedOperator !== \"\") {\n        storedValue = calculate(storedValue, lastValue, storedOperator);\n      } else {\n        // annars: spara bara ner senaste värdet i storedValue\n        storedValue = lastValue;\n      }\n\n      // nollställ senaste värdet, uppdatera sparad operator\n      lastValue = \"\";\n      storedOperator = clickedOperator;\n      display.innerText = clickedOperator; // visa vilken operator man klickat på\n    }\n  });\n});\n\nif (clearBtn !== null) {\n  clearBtn.addEventListener(\"click\", () => {\n    // resettar allt\n    if (display !== null) {\n      display.innerText = \"0\";\n    }\n    storedValue = \"\";\n    lastValue = \"\";\n    storedOperator = \"\";\n  });\n}\n\nif (equalsBtn !== null) {\n  equalsBtn.addEventListener(\"click\", () => {\n    // kollar att allt är ok dvs det finns ett senaste värde och en vald operator. Annars händer inget\n    if (display !== null && lastValue !== \"\" && storedOperator !== \"\") {\n      // gör beräkningen med sparat värde, senast värde och vald operator, spara det i storedValue\n      storedValue = calculate(storedValue, lastValue, storedOperator);\n      \n      // visa resultat och resetta\n      display.innerText = storedValue; \n      lastValue = \"\"; \n      storedOperator = \"\"; \n    }\n  });\n}\n\n// beräkningsfunktion som tar emot tre strängar: två värden (sparat och senaste), plus vår valda operator\nfunction calculate(firstValue: string, secondValue: string, operator: string): string {\n  const num1: number = parseFloat(firstValue);\n  const num2: number = parseFloat(secondValue);\n\n  // kollar vilken operator som valts, returnerar beräkningsresultat som sträng\n  if (operator === \"+\") {\n    return (num1 + num2).toString();\n  } else if (operator === \"-\") {\n    return (num1 - num2).toString();\n  } else if (operator === \"*\") {\n    return (num1 * num2).toString();\n  } else if (operator === \"/\") {\n    return (num1 / num2).toString();\n  } else {\n    return \"0\";\n  }\n}\n\n// lägger till bakgrundsbild på miniräknaren\nconst calculator: HTMLElement | null = document.querySelector(\".calculator\");\nconst imgUrl = new URL(\"images/bg.jpg\",import.meta.url);\n\n if(calculator !== null) {\n    calculator.style.backgroundImage = `url(${imgUrl})`;\n }","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"9A19H\")).toString();"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$b4e14b6b8da86996$var$numberBtns","document","querySelectorAll","$b4e14b6b8da86996$var$operatorBtns","$b4e14b6b8da86996$var$clearBtn","querySelector","$b4e14b6b8da86996$var$equalsBtn","$b4e14b6b8da86996$var$display","$b4e14b6b8da86996$var$lastValue","$b4e14b6b8da86996$var$storedValue","$b4e14b6b8da86996$var$storedOperator","$b4e14b6b8da86996$var$calculate","firstValue","secondValue","operator","num1","parseFloat","num2","toString","forEach","button","addEventListener","clickedNumber","innerText","clickedOperator","$b4e14b6b8da86996$var$calculator","$2e786cb42e47a2f1$exports","URL","resolve","url","$b4e14b6b8da86996$var$imgUrl","style","backgroundImage"],"version":3,"file":"index.d9b352e7.js.map"}